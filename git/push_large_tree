#!/bin/bash

# Script to push every commit from a branch to a remote branch individually.
# Usage:
#   ./script.sh [-f] [-h] [--dump] [-v|--verbose] <remote> <branch> <remote_branch>

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Display help documentation
function show_help {
    echo -e "${BLUE}Usage: $0 [OPTIONS] <REMOTE> <BRANCH> <REMOTE_BRANCH>${NC}"
    echo
    echo -e "${YELLOW}This script pushes every commit from a specified branch"
    echo -e "to a specified remote branch, one by one.${NC}"
    echo
    echo -e "${GREEN}Options:${NC}"
    echo -e "  -f         Use 'git push -f' to force push commits."
    echo -e "  --dump     Enable debug outputs."
    echo -e "  -v, --verbose Enable general output."
    echo -e "  -h         Show this help message."
    exit 0
}

# Default values
FORCE_PUSH=""
VERBOSE=false
DUMP=false

# Parse options
while [[ "$1" == -* ]]; do
    case "$1" in
        -f)
            FORCE_PUSH="-f"
            ;;
        --dump)
            DUMP=true
            ;;
        -v|--verbose)
            VERBOSE=true
            ;;
        -h)
            show_help
            ;;
        ?*)
            echo -e "${RED}Invalid option: $1${NC}" >&2
            show_help
            ;;
    esac
    shift

done

# Validate arguments
if [ "$#" -ne 3 ]; then
    echo -e "${RED}Error: Invalid number of arguments.${NC}"
    show_help
fi

REMOTE=$1
BRANCH=$2
REMOTE_BRANCH=$3

# Count the number of commits
N=$(git rev-list --count $BRANCH)

# Function to retry a push until it succeeds
function retry_push {
    local push_command="$1"
    local commit_sha="$2"

    while true; do
        eval "$push_command" &> /dev/null
        if [ $? -eq 0 ]; then
            $VERBOSE && echo -e "${GREEN}Successfully pushed commit $commit_sha${NC}"
            break
        else
            $VERBOSE && echo -e "${YELLOW}Retrying push for commit $commit_sha...${NC}"
            sleep 2
        fi
    done
}

# Function to check if a commit exists on the remote
function is_commit_pushed {
    local sha="$1"
    $DUMP && echo -e "${BLUE}Checking if commit $sha exists on remote using 'git branch -r --contains'...${NC}"
    git branch -r --contains "$sha" | grep -q "$REMOTE/$REMOTE_BRANCH"
    local result=$?
    if [ $result -eq 0 ]; then
        $VERBOSE && echo -e "${GREEN}Commit $sha exists on remote.${NC}"
    else
        $VERBOSE && echo -e "${RED}Commit $sha does not exist on remote.${NC}"
    fi
    return $result
}

# Push each commit individually
for (( i=$N-1; i>=1; i-- )); do
    commit_num="$BRANCH~$i"
    sha=$(git log $commit_num -1 --format="%H")

    if [ -z "$FORCE_PUSH" ]; then
        $VERBOSE && echo -e "${BLUE}Checking if commit $sha is already pushed...${NC}"
        if is_commit_pushed "$sha"; then
            $VERBOSE && echo -e "${YELLOW}Commit $sha is already on the remote. Skipping...${NC}"
            continue
        fi
    fi

    if ! $VERBOSE; then
        echo -ne "\r${YELLOW}Progress: $((N-i))/$N commits processed${NC}"
    fi

    $VERBOSE && echo -e "${BLUE}Pushing commit $sha${NC}"
    retry_push "git push $FORCE_PUSH $REMOTE $sha:$REMOTE_BRANCH" "$sha"
done

# Push the last commit (branch tip)
if [ -z "$FORCE_PUSH" ]; then
    $VERBOSE && echo -e "${BLUE}Checking if the latest commit of $BRANCH is already pushed...${NC}"
    latest_sha=$(git log $BRANCH -1 --format="%H")
    if is_commit_pushed "$latest_sha"; then
        $VERBOSE && echo -e "${YELLOW}The latest commit $latest_sha is already on the remote. Skipping...${NC}"
        exit 0
    fi
fi

if ! $VERBOSE; then
    echo -ne "\r${YELLOW}Progress: $N/$N commits processed${NC}\n"
fi

$VERBOSE && echo -e "${BLUE}Pushing the last commit of $BRANCH${NC}"
retry_push "git push $FORCE_PUSH $REMOTE $BRANCH:$REMOTE_BRANCH" "$BRANCH"

# Ensure the last push was successful
if [ $? -eq 0 ]; then
    $VERBOSE && echo -e "${GREEN}All commits pushed successfully.${NC}"
else
    $VERBOSE && echo -e "${RED}Error: Failed to push the last commit. Retrying...${NC}"
    retry_push "git push $FORCE_PUSH $REMOTE $BRANCH:$REMOTE_BRANCH" "$BRANCH"
fi

# improved with ChatGPT
