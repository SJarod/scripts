#!/bin/bash

# Default values for options
REPO=""
DIR=""
MAX_MEMORY_USAGE=95
ENABLE_KILL=false
VERBOSE=false

# Colors for output
RED="\033[0;31m"
GREEN="\033[0;32m"
YELLOW="\033[0;33m"
BLUE="\033[0;34m"
NC="\033[0m" # No color

# Function to display help message
display_help() {
    echo -e "${GREEN}Usage:${NC} $0 -r <repository-url> -d <destination-directory> [options]"
    echo ""
    echo -e "${BLUE}Description:${NC}"
    echo "This script clones a Git repository, migrates Git LFS files to regular Git files,"
    echo "uninstalls Git LFS, removes Unreal Engine and IDE-related files from the Git history,"
    echo "identifies large files, renames them, and optionally moves them to a new branch."
    echo "Additionally, it monitors memory usage and can terminate if usage exceeds a specified threshold."
    echo ""
    echo -e "${YELLOW}Options:${NC}"
    echo "  -r <repository-url>     Repository URL to clone (required)"
    echo "  -d <destination-dir>     Directory to clone the repository into (required)"
    echo "  -m <max-memory-usage>    Maximum memory usage percentage (default: 95)"
    echo "  -k                       Enable memory usage monitoring and terminate if limit is reached"
    echo "  -v                       Enable verbose output"
    echo "  -h, --help               Show this help message"
    echo ""
    echo -e "${GREEN}Example:${NC}"
    echo "  ./clone+clean.sh -r https://github.com/username/repo.git -d my-folder -m 90 -k -v"
    exit 0
}

# Function to print verbose messages
log() {
    if $VERBOSE; then
        echo -e "$1"
    fi
}

# Function to clone the Git repository
clone_repo() {
    log "${BLUE}Cloning repository into $DIR...${NC}"
    git clone "$REPO" "$DIR"
    cd "$DIR" || exit
}

# Function to uninstall Git LFS
uninstall_lfs() {
    log "${BLUE}Downloading LFS uninstallation script...${NC}"
    curl -o lfs_uninstall.sh https://raw.githubusercontent.com/SJarod/scripts/refs/heads/master/git/lfs/lfs_uninstall

    log "${BLUE}Executing LFS uninstallation script...${NC}"
    bash lfs_uninstall.sh -k -v -m "$MAX_MEMORY_USAGE"
    
    # Remove the downloaded LFS uninstallation script
    rm -f lfs_uninstall.sh
}

# Function to obliterate unnecessary files (Unreal Engine and IDE-related)
obliterate_files() {
    log "${BLUE}Downloading obliterate script...${NC}"
    curl -o obliterate.sh https://raw.githubusercontent.com/SJarod/scripts/refs/heads/master/git/obliterate

    log "${BLUE}Removing Unreal Engine files from Git history...${NC}"
    bash obliterate.sh StarterContent
    bash obliterate.sh Intermediate
    bash obliterate.sh Saved

    # Remove IDE-related files
    log "${BLUE}Removing IDE-related files from Git history...${NC}"
    bash obliterate.sh .vs
    bash obliterate.sh .vsconfig
    bash obliterate.sh .idea

    # Remove the downloaded obliterate script
    rm -f obliterate.sh
}

# Function to find large files in the repository
find_large_files() {
    log "${BLUE}Downloading find_large_files script...${NC}"
    curl -o find_large_files.sh https://raw.githubusercontent.com/SJarod/scripts/refs/heads/master/git/find_large_files

    log "${BLUE}Identifying large files in the repository...${NC}"
    chmod +x find_large_files.sh
    ./find_large_files.sh -o large_files -s 100 -m "$MAX_MEMORY_USAGE" -k

    # Initialize a flag to track whether large files were found
    LARGE_FILES_FOUND=false

    log "${BLUE}Renaming large files in the repository history...${NC}"
    mkdir -p HeavyContent
    while IFS= read -r line; do
      if [[ $line =~ Large\ file\ found:\ (.+)\ \(Commit:\ ]]; then
        filepath="${BASH_REMATCH[1]}"
        LARGE_FILES_FOUND=true
        git filter-repo --path-rename "$filepath":HeavyContent/"$filepath"
      fi
    done < large_files

    # If large files were found, return true
    if $LARGE_FILES_FOUND; then
        return 0
    else
        return 1
    fi

    # Remove the find_large_files script and temporary files
    rm -f find_large_files.sh large_files
}

# Function to move large files folder to another branch
move_large_files_to_branch() {
    log "${BLUE}Creating a new branch 'heavy-content' with the HeavyContent folder...${NC}"
    git subtree split --prefix=HeavyContent -b heavy-content
}

# Check for --help or -h option
if [[ "$1" == "--help" || "$1" == "-h" ]]; then
    display_help
fi

# Parse command line arguments
while getopts "r:d:m:kv" opt; do
  case $opt in
    r)
      REPO=$OPTARG
      ;;
    d)
      DIR=$OPTARG
      ;;
    m)
      MAX_MEMORY_USAGE=$OPTARG
      ;;
    k)
      ENABLE_KILL=true
      ;;
    v)
      VERBOSE=true
      ;;
    *)
      echo -e "${RED}Usage: $0 -r <repository-url> -d <destination-directory> [-m <max-memory-usage>] [-k] [-v]${NC}"
      exit 1
      ;;
  esac
done

# Ensure both repository URL and directory are provided
if [ -z "$REPO" ] || [ -z "$DIR" ]; then
  echo -e "${RED}Error: Both repository URL and destination directory must be specified.${NC}"
  echo -e "${YELLOW}Usage:${NC} $0 -r <repository-url> -d <destination-directory> [-m <max-memory-usage>] [-k] [-v]"
  exit 1
fi

# Execute the functions
clone_repo
uninstall_lfs
obliterate_files
find_large_files
move_large_files_to_branch

# Completion message
echo -e "${GREEN}Repository cloned, cleaned, and processed successfully.${NC}"

# improved with ChatGPT
